module top_level:

input On;
input Off;
input Resume;
input Set;
input QuickAccel;
input QuickDecel;
input Accel: float;
input Brake: float;
input Speed: float;
output CruiseSpeed: float;
output ThrottleCmd: float;
output CruiseState : integer;


    signal state : integer in 
        run cruise_states [
            signal On/On_internal;
            signal Off/Off_internal;
            signal Resume/Resume_internal;
            signal Accel/Accel_internal;
            signal Brake/Brake_internal;
            signal Speed/Speed_internal;
            signal CruiseState/CruiseState_internal

        ]
        ||
        run speed_control [
            signal Set/Set_internal;
            signal QuickAccel/QuickAccel_internal;
            signal QuickDecel/QuickDecel_internal;
            signal Accel/Accel_internal;
            signal Speed/Speed_internal;
            signal CruiseSpeed/CruiseSpeed_internal;
            signal CruiseState/CruiseState_internal;
            signal ThrottleCmd/ThrottleCmd_internal
            ]

    end signal
end module


module cruise_states:

input On_internal;
input Off_internal;
input Resume_internal;
input Accel_internal: float;
input Brake_internal: float;
input Speed_internal: float;
output CruiseState_internal : integer;


constant PedalsMin = 3.0f : float;
constant SpeedMin = 30.0f : float;
constant SpeedMax = 150.0f : float;

%OFF-1 ON-2 STDBY-3 DIS-4


    var state := 1 : integer in 

        loop

            emit CruiseState_internal(state);
            pause;

            trap T in

                if state = 1 then

                    present On_internal then
                    state := 2;
                    exit T;
                    end present;
                end if;

                if state = 2 then 
                
                    present Off_internal then
                        state := 1;
                        exit T;
                    end present;

                    if  ?Brake_internal > PedalsMin then
                        state := 3;
                        exit T;
                    end if;
                    
                    if ?Accel_internal > PedalsMin or ?Speed_internal > SpeedMax or ?Speed_internal < SpeedMin then
                        state := 4;
                        exit T;
                    end if;


                end if;
                
                if state = 4 then

                    present Off_internal then
                        state := 1;
                        exit T;
                    end present;

                    if ?Brake_internal > PedalsMin then
                        state := 3;
                        exit T;
                    end if;

                    if ?Accel_internal < PedalsMin and ?Speed_internal < SpeedMax and ?Speed_internal > SpeedMin then
                        state := 2;
                        exit T;
                    end if;
                    
    
                    exit T;
                end if;
                
                if state = 3 then

                    present Off_internal then
                        state := 1;
                        exit T;
                    end present;

                    present Resume_internal then
                        if ?Accel_internal < PedalsMin and ?Speed_internal < SpeedMax and ?Speed_internal > SpeedMin then
                            state := 2;
                            exit T;
                        else
                            state := 4;
                            exit T;
                        end if;
                    end present;
                
                end if
            end trap
        end loop		
    end var
end module	


module speed_control:

input Set_internal;
input QuickAccel_internal;
input QuickDecel_internal;
input Accel_internal: float;
input Speed_internal: float;
input CruiseState_internal: integer;
output CruiseSpeed_internal: float;
output ThrottleCmd_internal: float;


% constants
constant SpeedMin = 30.0f : float;
constant SpeedMax = 150.0f : float;
constant SpeedInc = 2.5f : float;
constant PedalsMin = 3.0f : float;


    function regulateThrottle(boolean, float, float) : float;

    var temp_speed := 0.0f : float in 

        loop 

            emit CruiseSpeed_internal(temp_speed);
            pause;

            if ?CruiseState_internal <> 1 then
                if ?CruiseState_internal = 2 and pre(?CruiseState_internal) = 1 then 

                    if ?Speed_internal > SpeedMax then
                        temp_speed := SpeedMax;
                    elsif ?Speed_internal < SpeedMin then
                        temp_speed := SpeedMin; 
                    else 
                        temp_speed := ?Speed_internal;
                    end if;

                end if;

                present Set_internal then 
                    if ?Speed_internal > SpeedMax then
                        temp_speed := SpeedMax;
                    elsif ?Speed_internal < SpeedMin then
                        temp_speed := SpeedMin; 
                    else 
                        temp_speed := ?Speed_internal;
                    end if;

                end present;

                present QuickAccel_internal then 
                    if temp_speed + SpeedInc <= SpeedMax then 
                        temp_speed := temp_speed + SpeedInc;
                    
                    elsif temp_speed + SpeedInc > SpeedMax then
                        temp_speed := SpeedMax;
                    end if;
                end present;

                present QuickDecel_internal then 
                    if temp_speed - SpeedInc >= SpeedMin then 
                        temp_speed := temp_speed - SpeedInc;
                    
                    elsif temp_speed - SpeedInc < SpeedMin then
                        temp_speed := SpeedMin;
                    end if;
                end present;
            end if;

            if ?CruiseState_internal = 2 then
                emit ThrottleCmd_internal(regulateThrottle(pre(?CruiseState_internal) <> 2, temp_speed, ?Speed_internal));
            else 
                emit ThrottleCmd_internal(?Accel_internal);
            end if;
        end loop
    end var
end module

